#include<iostream>
using namespace std;


//class Cfather
//{
//public:
//	void fun()
//	{
//		cout << "Cfather::fun" << endl;
//
//	}
//};
//
//class Cson :public Cfather
//{
//	void fun()
//	{
//		cout << "Cson::Lfun" << endl;
//	}
//};
//
//
//int main()
//{
//	Cfather* pfa = new Cson;//父类指针指向子类对象
//	pfa->fun();//父类指针调用父类函数
//
//	return 0;
//}


class Ct
{
public:

	virtual void fun()
	{
		cout << "fun()" << endl;
	}

	virtual void fun2()
	{
		cout << "fun2()" << endl;
	}

	void fun3()
	{
		cout << "fun3()" << endl;
	}

	int m_a;
	Ct()
	{
		m_a = 10;
	}
};

/*
	如果类中存在虚函数,在定义对象时,会多分配出指针大小的空间,这个空间是虚函数指针_vfptr,是二级指针void**


	指向了一个指针数组,该指针数组是虚函数数组,类型为void* 


	是一种编译器会自动加的类成员属性,是属于对象的,在对象内存空间的首地址,在构造函数的初始化参数列表中进行初始化


	当定义多个对象,会存在多份虚函数指针,但是会指向同一个虚函数列表
	
	
	即vftable:虚函数列表,是一个数组,每个元素是虚函数的地址,虚函数列表是独一份的,是属于类的,在编译期存在,
	

	其中存放顺序按照【声明或定义】的顺序,存放的是类中所有虚函数的函数地址

	
----------------------------------------------------------------------------------------------------------------------------
	虚函数调用流程：

	定义对象包含虚函数指针void ** _vfptr,通过虚函数指针void ** _vfptr找到指向的虚函数列表vftable,

	
	再从虚函数列表vftable中按下标定位所需的虚函数地址,

	
	获取地址后,通过地址调用真正的虚函数


	普通类成员函数和虚函数区别
	1.调用流程不同
	2.调用虚函数 效率低 速度慢 流程多
	3.使用场景不同(虽然即使定义一个类,不定义其他类,仍能使用虚函数,但是效率低),虚函数主要用来实现多态,普通函数无法实现多态（除非强转设置类函数指针）
	
*/
int main01()
{
	cout << sizeof(Ct) << endl;//是类的对象占用空间 但是当使用虚函数的时候会额外计算
	Ct tst;

	Ct* pst22 = nullptr;

	pst22->fun3();//空指针没有对象 若没用到成员(this不指向任何成员属性) 则可以使用

	pst22->fun();
	//出现访问冲突 而pst是空指针没有对象,则此时_vfptr为空
	//但是虚函数指针是要指向一个指针数组,不能为空
	 
	//---------------------------------------------------------------

	Ct tst2;
	tst2.fun();

	//---------------------------------------------------------------

	Ct* pst = new Ct;
	//*(int*)pst == _vfptr==&arr; //类中有虚函数指针,其实际含义可以理解为强转的int型二级指针

	int a = *(int*)pst;//获取vfptr
	int* p = (int*)a;//获取void*的首地址 即指针数组的首地址

	typedef void(*p_fun)();//优化

	//p[0];//是获得fun()函数
	
	p_fun p1 = (void(*)())p[0];//强转为对应函数的类型 void(*)()
	p_fun p2 = (p_fun)p[1];

	(*p1)();//fun() 成功调用虚函数fun()
	(*p2)();//fun2() 成功调用虚函数fun2()


	//------------------------------------------------------
	cout << sizeof(Ct) << endl;//8
	Ct tst11;
	cout << &tst11 << endl;//即虚函数指针是一个类成员属性
	cout << &tst11.m_a << endl;

	
	Ct tst121;
	cout << &tst121 << endl;//即虚函数指针是一个类成员属性
	cout << &tst121.m_a << endl;

	//表明虚函数列表是属于类的 独一份 虚函数指针都指向同一个虚函数列表


	return 0;
}